{"version":3,"sources":["webpack:////home/cleong/relaks/index.js","webpack:///./pages/species-page.jsx","webpack:///./widgets/loading.jsx","webpack:///./widgets/list.jsx"],"names":["_options__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_hooks__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","get","set","plant","use","memo","_callee","props","route","swapi","_useProgress","_useProgress2","show","species","films","people","homeworld","render","babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","name","classification","designation","average_height","skin_colors","hair_colors","eye_colors","average_lifespan","language","widgets_list__WEBPACK_IMPORTED_MODULE_6__","urls","items","pageName","field","widgets_loading__WEBPACK_IMPORTED_MODULE_7__","useProgress","babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default","fetchOne","params","id","sent","fetchMultiple","minimum","stop","this","component","Relaks","SpeciesPage","d","Loading","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","className","List","map","url","index","item","pending","length","i","extractID","find","text","linkProps","href","undefined","key","defaultProps"],"mappings":"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","file":"species-page.js","sourcesContent":["import { get, set, plant } from './options';\nimport { use, memo } from './hooks';\n\nexport default {\n\tget: get,\n\tset: set,\n\tplant: plant,\n\n\tuse: use,\n\tmemo: memo,\t\n};\n\nexport * from './options';\nexport * from './class';\nexport * from './hooks';\nexport * from './async-rendering-cycle';\nexport * from './async-rendering-interrupted';\nexport * from './async-save-buffer';\n","import React from 'react';\nimport Relaks, { useProgress } from 'relaks';\nimport { List } from 'widgets/list';\nimport { Loading } from 'widgets/loading';\n\nasync function SpeciesPage(props) {\n    const { route, swapi } = props;\n    const [ show ] = useProgress();\n\n    render();\n    const species = await swapi.fetchOne(`/species/${route.params.id}/`);\n    render();\n    const films = await swapi.fetchMultiple(species.films, { minimum: '60%' });\n    render();\n    const people = await swapi.fetchMultiple(species.people, { minimum: '60%' });\n    render();\n    const homeworld = await swapi.fetchOne(species.homeworld);\n    render();\n\n    function render() {\n        if (!species) {\n            show(<Loading />);\n        } else {\n            show(\n                <div>\n                    <h1>{species.name}</h1>\n                    <div>Classification: {species.classification}</div>\n                    <div>Designation: {species.designation}</div>\n                    <div>Average height: {species.average_height}</div>\n                    <div>Skin colors: {species.skin_colors}</div>\n                    <div>Hair colors: {species.hair_colors}</div>\n                    <div>Eye colors: {species.eye_colors}</div>\n                    <div>Average lifespan: {species.average_lifespan}</div>\n                    <div>Language: {species.language}</div>\n                    <h2>Homeworld</h2>\n                    <List urls={species.homeworld} items={homeworld} pageName=\"planet-summary\" route={route} />\n                    <h2>Members</h2>\n                    <List urls={species.people} items={people} pageName=\"character-summary\" route={route} />\n                    <h2>Films</h2>\n                    <List urls={species.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n                </div>\n            );\n        }\n    }\n}\n\nconst component = Relaks.memo(SpeciesPage);\n\nexport {\n    component as default,\n};\n","import React, { Component } from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Loading as default,\n    Loading\n};\n","import React from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return <ul>{items.map(renderItem)}</ul>;\n\n    function renderItem(item, i) {\n        const id = route.extractID(item.url);\n        const url = route.find(pageName, { id });\n        const text = item.pending ? '...' : item[field];\n        const linkProps = {\n            href: url,\n            className: (item.pending) ? 'pending' : undefined,\n        };\n        return <li key={i}><a {...linkProps}>{text}</a></li>;\n    }\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nexport {\n    List\n};\n"],"sourceRoot":""}