{"version":3,"sources":["webpack:///./pages/species-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_preact","__webpack_require__","_preact2","_list","SpeciesPage","meanwhile","this","props","route","swapi","show","h","SpeciesPageSync","fetchOne","params","id","species","fetchMultiple","films","minimum","people","homeworld","AsyncComponent","displayName","_props2","className","name","classification","designation","average_height","skin_colors","hair_colors","eye_colors","average_lifespan","language","List","urls","items","pageName","field","_loading2","default","Component","map","url","index","item","pending","length","extractID","find","text","linkProps","href","undefined","defaultProps","Loading"],"mappings":"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","file":"species-page.js","sourcesContent":["import { h, Component } from 'preact';\nimport { AsyncComponent } from 'relaks/preact';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\n/** @jsx h */\n\nclass SpeciesPage extends AsyncComponent {\n    static displayName = 'SpeciesPage';\n\n    /**\n     * Retrieve remote data and render the synchronize half of this component\n     *\n     * @param  {Meanwhile}  meanwhile\n     *\n     * @return {VNode}\n     */\n    async renderAsync(meanwhile) {\n        let { route, swapi } = this.props;\n        let props = {\n            route,\n        };\n        meanwhile.show(<SpeciesPageSync {...props} />);\n        props.species = await swapi.fetchOne(`/species/${route.params.id}/`);\n        meanwhile.show(<SpeciesPageSync {...props} />);\n        props.films = await swapi.fetchMultiple(props.species.films, { minimum: '60%' });\n        meanwhile.show(<SpeciesPageSync {...props} />);\n        props.people = await swapi.fetchMultiple(props.species.people, { minimum: '60%' });\n        meanwhile.show(<SpeciesPageSync {...props} />);\n        props.homeworld = await swapi.fetchOne(props.species.homeworld);\n        return <SpeciesPageSync {...props} />;\n    }\n}\n\nclass SpeciesPageSync extends Component {\n    static displayName = 'SpeciesPageSync';\n\n    /**\n     * Render the component, making best effort using what props are given\n     *\n     * @return {VNode}\n     */\n    render() {\n        let { route, species, homeworld, people, films } = this.props;\n        if (!species) {\n            return <Loading />;\n        }\n        return (\n            <div className=\"character-page\">\n                <h1>{species.name}</h1>\n                <div>Classification: {species.classification}</div>\n                <div>Designation: {species.designation}</div>\n                <div>Average height: {species.average_height}</div>\n                <div>Skin colors: {species.skin_colors}</div>\n                <div>Hair colors: {species.hair_colors}</div>\n                <div>Eye colors: {species.eye_colors}</div>\n                <div>Average lifespan: {species.average_lifespan}</div>\n                <div>Language: {species.language}</div>\n                <h2>Homeworld</h2>\n                <List urls={species.homeworld} items={homeworld} pageName=\"planet-summary\" route={route} />\n                <h2>Members</h2>\n                <List urls={species.people} items={people} pageName=\"character-summary\" route={route} />\n                <h2>Films</h2>\n                <List urls={species.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n            </div>\n        );\n    }\n}\n\nexport {\n    SpeciesPage as default,\n    SpeciesPage,\n    SpeciesPageSync,\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return (\n        <ul>\n        {\n            items.map((item) => {\n                let id = route.extractID(item.url);\n                let url = route.find(pageName, { id });\n                let text = item.pending ? '...' : item[field];\n                let linkProps = {\n                    href: url,\n                    className: (item.pending) ? 'pending' : undefined,\n                };\n                return <li><a {...linkProps}>{text}</a></li>;\n            })\n        }\n        </ul>\n    );\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nList.displayName = 'List';\n\nexport {\n    List as default,\n    List\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nLoading.displayName = 'Loading';\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}