{"version":3,"sources":["webpack:///./pages/species-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_callee","props","route","swapi","_useProgress","_useProgress2","show","species","films","people","homeworld","render","_regenerator2","default","wrap","_context","prev","next","_react2","createElement","name","classification","designation","average_height","skin_colors","hair_colors","eye_colors","average_lifespan","language","_list","List","urls","items","pageName","field","_loading2","_hooks","useProgress","_slicedToArray3","fetchOne","params","id","sent","fetchMultiple","minimum","stop","this","__webpack_require__","asyncComponent","_hooks2","SpeciesPage","_react","map","url","index","item","pending","length","className","i","extractID","find","text","linkProps","href","undefined","key","defaultProps","Loading"],"mappings":"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","file":"species-page.js","sourcesContent":["import React, { Component } from 'react';\nimport Relaks, { useProgress } from 'relaks/hooks';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\nasync function SpeciesPage(props) {\n    const { route, swapi } = props;\n    const [ show ] = useProgress();\n\n    render();\n    const species = await swapi.fetchOne(`/species/${route.params.id}/`);\n    render();\n    const films = await swapi.fetchMultiple(species.films, { minimum: '60%' });\n    render();\n    const people = await swapi.fetchMultiple(species.people, { minimum: '60%' });\n    render();\n    const homeworld = await swapi.fetchOne(species.homeworld);\n    render();\n\n    function render() {\n        if (!species) {\n            show(<Loading />);\n        } else {\n            show(\n                <div>\n                    <h1>{species.name}</h1>\n                    <div>Classification: {species.classification}</div>\n                    <div>Designation: {species.designation}</div>\n                    <div>Average height: {species.average_height}</div>\n                    <div>Skin colors: {species.skin_colors}</div>\n                    <div>Hair colors: {species.hair_colors}</div>\n                    <div>Eye colors: {species.eye_colors}</div>\n                    <div>Average lifespan: {species.average_lifespan}</div>\n                    <div>Language: {species.language}</div>\n                    <h2>Homeworld</h2>\n                    <List urls={species.homeworld} items={homeworld} pageName=\"planet-summary\" route={route} />\n                    <h2>Members</h2>\n                    <List urls={species.people} items={people} pageName=\"character-summary\" route={route} />\n                    <h2>Films</h2>\n                    <List urls={species.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n                </div>\n            );\n        }\n    }\n}\n\nconst asyncComponent = Relaks(SpeciesPage);\n\nexport {\n    asyncComponent as default,\n    asyncComponent as SpeciesPage,\n};\n","import React, { Component } from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return <ul>{items.map(renderItem)}</ul>;\n\n    function renderItem(item, i) {\n        const id = route.extractID(item.url);\n        const url = route.find(pageName, { id });\n        const text = item.pending ? '...' : item[field];\n        const linkProps = {\n            href: url,\n            className: (item.pending) ? 'pending' : undefined,\n        };\n        return <li key={i}><a {...linkProps}>{text}</a></li>;\n    }\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nexport {\n    List as default,\n    List\n};\n","import React, { Component } from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}