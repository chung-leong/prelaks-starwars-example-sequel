{"version":3,"sources":["webpack:///./pages/planet-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["props","render","a","show","planet","name","diameter","rotation_period","orbital_period","climate","gravity","terrain","surface_water","population","urls","residents","items","pageName","route","films","field","swapi","useProgress","fetchOne","params","id","fetchMultiple","minimum","component","Relaks","memo","List","map","url","index","item","pending","length","className","i","extractID","find","text","linkProps","href","undefined","key","defaultProps","Loading"],"mappings":"mRAKA,WAA0BA,GAA1B,oBAYWC,EAZX,SAAAC,EAAA,6DAYWD,EAZX,WAgBME,EAHGC,EAID,6BACE,4BAAKA,EAAOC,MACZ,0CAAgBD,EAAOE,SAAvB,OACA,iDAAuBF,EAAOG,gBAA9B,OACA,gDAAsBH,EAAOI,eAA7B,SACA,yCAAeJ,EAAOK,SACtB,yCAAeL,EAAOM,SACtB,yCAAeN,EAAOO,SACtB,+CAAqBP,EAAOQ,eAC5B,4CAAkBR,EAAOS,YACzB,yCACA,kBAAC,IAAD,CAAMC,KAAMV,EAAOW,UAAWC,MAAOD,EAAWE,SAAS,oBAAoBC,MAAOA,IACpF,qCACA,kBAAC,IAAD,CAAMJ,KAAMV,EAAOe,MAAOH,MAAOG,EAAOC,MAAM,QAAQH,SAAS,eAAeC,MAAOA,KAhBpF,kBAAC,IAAD,QAbDA,EAAiBlB,EAAjBkB,MAAOG,EAAUrB,EAAVqB,MADjB,EAEmBC,cAFnB,WAEUnB,EAFV,KAIEF,IAJF,SAKuBoB,EAAME,SAAN,mBAA2BL,EAAMM,OAAOC,GAAxC,MALvB,cAKQrB,EALR,OAMEH,IANF,UAOsBoB,EAAMK,cAActB,EAAOe,MAAO,CAAEQ,QAAS,QAPnE,eAOQR,EAPR,OAQElB,IARF,UAS0BoB,EAAMK,cAActB,EAAOW,UAAW,CAAEY,QAAS,QAT3E,QASQZ,EATR,OAUEd,IAVF,6C,sBAqCA,IAAM2B,EAAYC,IAAOC,M,+EC1CzB,sDAEA,SAASC,EAAK/B,GAAO,IACXkB,EAAwClB,EAAxCkB,MAAOJ,EAAiCd,EAAjCc,KAAME,EAA2BhB,EAA3BgB,MAAOI,EAAoBpB,EAApBoB,MAAOH,EAAajB,EAAbiB,SAgBjC,OAfIH,IAEqB,iBAAVA,IACPA,EAAO,CAAEA,GACTE,EAAQ,CAAEA,IAGdA,EAAQF,EAAKkB,KAAI,SAACC,EAAKC,GACnB,IAAIC,EAAQnB,EAASA,EAAMkB,GAAS,KAIpC,OAHKC,IACDA,EAAO,CAAEF,MAAKG,SAAS,IAEpBD,MAGVnB,EAGgB,IAAjBA,EAAMqB,OACC,wBAAIC,UAAU,SAAQ,4BAAI,wCAE9B,4BAAKtB,EAAMgB,KAElB,SAAoBG,EAAMI,GACtB,IAAMd,EAAKP,EAAMsB,UAAUL,EAAKF,KAC1BA,EAAMf,EAAMuB,KAAKxB,EAAU,CAAEQ,OAC7BiB,EAAOP,EAAKC,QAAU,MAAQD,EAAKf,GACnCuB,EAAY,CACdC,KAAMX,EACNK,UAAYH,EAAKC,QAAW,eAAYS,GAE5C,OAAO,wBAAIC,IAAKP,GAAG,sBAAOI,EAAYD,QAf/B,KAmBfX,EAAKgB,aAAe,CAChB3B,MAAO,S,gCCxCX,sDAEA,SAAS4B,IACL,OACI,yBAAKV,UAAU,WACX,6BACI,uBAAGA,UAAU,0BADjB","file":"planet-page.js","sourcesContent":["import React from 'react';\nimport Relaks, { useProgress } from 'relaks';\nimport { List } from '../widgets/list.jsx';\nimport { Loading } from '../widgets/loading.jsx';\n\nasync function PlanetPage(props) {\n  const { route, swapi } = props;\n  const [ show ] = useProgress();\n\n  render();\n  const planet = await swapi.fetchOne(`/planets/${route.params.id}/`);\n  render();\n  const films = await swapi.fetchMultiple(planet.films, { minimum: '60%' });\n  render();\n  const residents = await swapi.fetchMultiple(planet.residents, { minimum: '60%' });\n  render();\n\n  function render() {\n    if (!planet) {\n      show(<Loading />);\n    } else {\n      show(\n        <div>\n          <h1>{planet.name}</h1>\n          <div>Diameter: {planet.diameter} km</div>\n          <div>Rotation period: {planet.rotation_period} hr</div>\n          <div>Orbital period: {planet.orbital_period} days</div>\n          <div>Climate: {planet.climate}</div>\n          <div>Gravity: {planet.gravity}</div>\n          <div>Terrain: {planet.terrain}</div>\n          <div>Surface water: {planet.surface_water}</div>\n          <div>Population: {planet.population}</div>\n          <h2>Residents</h2>\n          <List urls={planet.residents} items={residents} pageName=\"character-summary\" route={route} />\n          <h2>Films</h2>\n          <List urls={planet.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n        </div>\n      );\n    }\n  }\n}\n\nconst component = Relaks.memo(PlanetPage);\n\nexport {\n  component as default,\n};\n","import React from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return <ul>{items.map(renderItem)}</ul>;\n\n    function renderItem(item, i) {\n        const id = route.extractID(item.url);\n        const url = route.find(pageName, { id });\n        const text = item.pending ? '...' : item[field];\n        const linkProps = {\n            href: url,\n            className: (item.pending) ? 'pending' : undefined,\n        };\n        return <li key={i}><a {...linkProps}>{text}</a></li>;\n    }\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nexport {\n    List\n};\n","import React from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}