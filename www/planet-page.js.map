{"version":3,"sources":["webpack:///./pages/planet-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_preact","__webpack_require__","_preact2","_list","PlanetPage","meanwhile","this","props","route","swapi","show","h","PlanetPageSync","fetchOne","params","id","planet","fetchMultiple","films","minimum","residents","AsyncComponent","displayName","_props2","name","diameter","rotation_period","orbital_period","climate","gravity","terrain","surface_water","population","List","urls","items","pageName","field","_loading2","default","Component","map","url","index","item","pending","length","className","extractID","find","text","linkProps","href","undefined","defaultProps","Loading"],"mappings":"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","file":"planet-page.js","sourcesContent":["import { h, Component } from 'preact';\nimport { AsyncComponent } from 'relaks/preact';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\n/** @jsx h */\n\nclass PlanetPage extends AsyncComponent {\n    static displayName = 'PlanetPage';\n\n    /**\n     * Retrieve remote data and render the synchronize half of this component\n     *\n     * @param  {Meanwhile}  meanwhile\n     *\n     * @return {VNode}\n     */\n    async renderAsync(meanwhile) {\n        let { route, swapi } = this.props;\n        let props = {\n            route,\n        };\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.planet = await swapi.fetchOne(`/planets/${route.params.id}/`);\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.films = await swapi.fetchMultiple(props.planet.films, { minimum: '60%' });\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.residents = await swapi.fetchMultiple(props.planet.residents, { minimum: '60%' });\n        meanwhile.show(<PlanetPageSync {...props} />);\n        return <PlanetPageSync {...props} />;\n    }\n}\n\nclass PlanetPageSync extends Component {\n    static displayName = 'PlanetPageSync';\n\n    /**\n     * Render the component, making best effort using what props are given\n     *\n     * @return {VNode}\n     */\n    render() {\n        let { route, planet, films, residents } = this.props;\n        if (!planet) {\n            return <Loading />;\n        }\n        return (\n            <div>\n                <h1>{planet.name}</h1>\n                <div>Diameter: {planet.diameter} km</div>\n                <div>Rotation period: {planet.rotation_period} hr</div>\n                <div>Orbital period: {planet.orbital_period} days</div>\n                <div>Climate: {planet.climate}</div>\n                <div>Gravity: {planet.gravity}</div>\n                <div>Terrain: {planet.terrain}</div>\n                <div>Surface water: {planet.surface_water}</div>\n                <div>Population: {planet.population}</div>\n                <h2>Residents</h2>\n                <List urls={planet.residents} items={residents} pageName=\"character-summary\" route={route} />\n                <h2>Films</h2>\n                <List urls={planet.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n            </div>\n        );\n    }\n}\n\nexport {\n    PlanetPage as default,\n    PlanetPage,\n    PlanetPageSync,\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return (\n        <ul>\n        {\n            items.map((item) => {\n                let id = route.extractID(item.url);\n                let url = route.find(pageName, { id });\n                let text = item.pending ? '...' : item[field];\n                let linkProps = {\n                    href: url,\n                    className: (item.pending) ? 'pending' : undefined,\n                };\n                return <li><a {...linkProps}>{text}</a></li>;\n            })\n        }\n        </ul>\n    );\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nList.displayName = 'List';\n\nexport {\n    List as default,\n    List\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nLoading.displayName = 'Loading';\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}