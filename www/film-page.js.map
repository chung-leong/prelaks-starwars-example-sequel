{"version":3,"sources":["webpack:///./pages/film-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["props","render","a","show","film","title","opening_crawl","director","producer","release_date","urls","characters","items","pageName","route","species","planets","vehicles","starships","swapi","useProgress","fetchOne","params","id","fetchMultiple","minimum","component","Relaks","memo","List","field","map","url","index","item","pending","length","className","i","extractID","find","text","linkProps","href","undefined","key","defaultProps","Loading"],"mappings":"iRAKA,WAAwBA,GAAxB,0BAkBWC,EAlBX,SAAAC,EAAA,6DAkBWD,EAlBX,WAsBME,EAHGC,EAID,6BACE,4BAAKA,EAAKC,OACV,2BAAID,EAAKE,eACT,0CAAgBF,EAAKG,UACrB,0CAAgBH,EAAKI,UACrB,8CAAoBJ,EAAKK,cACzB,0CACA,kBAAC,IAAD,CAAMC,KAAMN,EAAKO,WAAYC,MAAOD,EAAYE,SAAS,oBAAoBC,MAAOA,IACpF,uCACA,kBAAC,IAAD,CAAMJ,KAAMN,EAAKW,QAASH,MAAOG,EAASF,SAAS,kBAAkBC,MAAOA,IAC5E,uCACA,kBAAC,IAAD,CAAMJ,KAAMN,EAAKY,QAASJ,MAAOI,EAASH,SAAS,iBAAiBC,MAAOA,IAC3E,wCACA,kBAAC,IAAD,CAAMJ,KAAMN,EAAKa,SAAUL,MAAOK,EAAUJ,SAAS,kBAAkBC,MAAOA,IAC9E,yCACA,kBAAC,IAAD,CAAMJ,KAAMN,EAAKc,UAAWN,MAAOM,EAAWL,SAAS,mBAAmBC,MAAOA,KAlBhF,kBAAC,IAAD,QAnBDA,EAAiBd,EAAjBc,MAAOK,EAAUnB,EAAVmB,MADjB,EAEmBC,cAFnB,WAEUjB,EAFV,KAIEF,IAJF,SAKqBkB,EAAME,SAAN,iBAAyBP,EAAMQ,OAAOC,GAAtC,MALrB,cAKQnB,EALR,OAMEH,IANF,UAO2BkB,EAAMK,cAAcpB,EAAKO,WAAY,CAAEc,QAAS,IAP3E,eAOQd,EAPR,OAQEV,IARF,UASwBkB,EAAMK,cAAcpB,EAAKW,QAAS,CAAEU,QAAS,QATrE,eASQV,EATR,OAUEd,IAVF,UAWwBkB,EAAMK,cAAcpB,EAAKY,SAXjD,eAWQA,EAXR,OAYEf,IAZF,UAayBkB,EAAMK,cAAcpB,EAAKa,SAAU,CAAEQ,QAAS,QAbvE,eAaQR,EAbR,OAcEhB,IAdF,UAe0BkB,EAAMK,cAAcpB,EAAKc,UAAW,CAAEO,QAAS,QAfzE,QAeQP,EAfR,OAgBEjB,IAhBF,6C,sBA6CA,IAAMyB,EAAYC,IAAOC,M,+EClDzB,sDAEA,SAASC,EAAK7B,GAAO,IACXc,EAAwCd,EAAxCc,MAAOJ,EAAiCV,EAAjCU,KAAME,EAA2BZ,EAA3BY,MAAOkB,EAAoB9B,EAApB8B,MAAOjB,EAAab,EAAba,SAgBjC,OAfIH,IAEqB,iBAAVA,IACPA,EAAO,CAAEA,GACTE,EAAQ,CAAEA,IAGdA,EAAQF,EAAKqB,KAAI,SAACC,EAAKC,GACnB,IAAIC,EAAQtB,EAASA,EAAMqB,GAAS,KAIpC,OAHKC,IACDA,EAAO,CAAEF,MAAKG,SAAS,IAEpBD,MAGVtB,EAGgB,IAAjBA,EAAMwB,OACC,wBAAIC,UAAU,SAAQ,4BAAI,wCAE9B,4BAAKzB,EAAMmB,KAElB,SAAoBG,EAAMI,GACtB,IAAMf,EAAKT,EAAMyB,UAAUL,EAAKF,KAC1BA,EAAMlB,EAAM0B,KAAK3B,EAAU,CAAEU,OAC7BkB,EAAOP,EAAKC,QAAU,MAAQD,EAAKJ,GACnCY,EAAY,CACdC,KAAMX,EACNK,UAAYH,EAAKC,QAAW,eAAYS,GAE5C,OAAO,wBAAIC,IAAKP,GAAG,sBAAOI,EAAYD,QAf/B,KAmBfZ,EAAKiB,aAAe,CAChBhB,MAAO,S,gCCxCX,sDAEA,SAASiB,IACL,OACI,yBAAKV,UAAU,WACX,6BACI,uBAAGA,UAAU,0BADjB","file":"film-page.js","sourcesContent":["import React from 'react';\nimport Relaks, { useProgress } from 'relaks';\nimport { List } from '../widgets/list.jsx';\nimport { Loading } from '../widgets/loading.jsx';\n\nasync function FilmPage(props) {\n  const { route, swapi } = props;\n  const [ show ] = useProgress();\n\n  render();\n  const film = await swapi.fetchOne(`/films/${route.params.id}/`);\n  render();\n  const characters = await swapi.fetchMultiple(film.characters, { minimum: 5 });\n  render();\n  const species = await swapi.fetchMultiple(film.species, { minimum: '60%' });\n  render();\n  const planets = await swapi.fetchMultiple(film.planets);\n  render();\n  const vehicles = await swapi.fetchMultiple(film.vehicles, { minimum: '60%' });\n  render();\n  const starships = await swapi.fetchMultiple(film.starships, { minimum: '60%' });\n  render();\n\n  function render() {\n    if (!film) {\n      show(<Loading />);\n    } else {\n      show(\n        <div>\n          <h1>{film.title}</h1>\n          <p>{film.opening_crawl}</p>\n          <div>Director: {film.director}</div>\n          <div>Producer: {film.producer}</div>\n          <div>Release date: {film.release_date}</div>\n          <h2>Characters</h2>\n          <List urls={film.characters} items={characters} pageName=\"character-summary\" route={route} />\n          <h2>Species</h2>\n          <List urls={film.species} items={species} pageName=\"species-summary\" route={route} />\n          <h2>Planets</h2>\n          <List urls={film.planets} items={planets} pageName=\"planet-summary\" route={route} />\n          <h2>Vehicles</h2>\n          <List urls={film.vehicles} items={vehicles} pageName=\"vehicle-summary\" route={route} />\n          <h2>Starships</h2>\n          <List urls={film.starships} items={starships} pageName=\"starship-summary\" route={route} />\n        </div>\n      );\n    }\n  }\n}\n\nconst component = Relaks.memo(FilmPage);\n\nexport {\n  component as default,\n};\n","import React from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return <ul>{items.map(renderItem)}</ul>;\n\n    function renderItem(item, i) {\n        const id = route.extractID(item.url);\n        const url = route.find(pageName, { id });\n        const text = item.pending ? '...' : item[field];\n        const linkProps = {\n            href: url,\n            className: (item.pending) ? 'pending' : undefined,\n        };\n        return <li key={i}><a {...linkProps}>{text}</a></li>;\n    }\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nexport {\n    List\n};\n","import React from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}