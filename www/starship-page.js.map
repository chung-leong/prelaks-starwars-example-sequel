{"version":3,"sources":["webpack:///./pages/starship-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_preact","__webpack_require__","_preact2","_list","StarshipPage","meanwhile","this","props","route","swapi","show","h","StarshipPageSync","fetchOne","params","id","starship","fetchMultiple","films","minimum","pilots","AsyncComponent","displayName","_props2","className","name","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","MGLT","hyperdrive_rating","crew","passenger","cargo_capacity","consumables","starship_class","List","urls","items","pageName","field","_loading2","default","Component","map","url","index","item","pending","extractID","find","text","linkProps","href","undefined","defaultProps","Loading"],"mappings":"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","file":"starship-page.js","sourcesContent":["import { h, Component } from 'preact';\nimport { AsyncComponent } from 'relaks/preact';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\n/** @jsx h */\n\nclass StarshipPage extends AsyncComponent {\n    static displayName = 'StarshipPage';\n\n    /**\n     * Retrieve remote data and render the synchronize half of this component\n     *\n     * @param  {Meanwhile}  meanwhile\n     *\n     * @return {VNode}\n     */\n    async renderAsync(meanwhile) {\n        let { route, swapi } = this.props;\n        let props = {\n            route,\n        };\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.starship = await swapi.fetchOne(`/starships/${route.params.id}/`);\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.films = await swapi.fetchMultiple(props.starship.films, { minimum: '60%' });\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.pilots = await swapi.fetchMultiple(props.starship.pilots, { minimum: '60%' });\n        return <StarshipPageSync {...props} />;\n    }\n}\n\nclass StarshipPageSync extends Component {\n    static displayName = 'StarshipPageSync';\n\n    /**\n     * Render the component, making best effort using what props are given\n     *\n     * @return {VNode}\n     */\n    render() {\n        let { route, starship, pilots, films } = this.props;\n        if (!starship) {\n            return <Loading />;\n        }\n        return (\n            <div className=\"character-page\">\n                <h1>{starship.name}</h1>\n                <div>Model: {starship.model}</div>\n                <div>Manufacturer: {starship.manufacturer}</div>\n                <div>Cost in credits: {starship.cost_in_credits}</div>\n                <div>Length: {starship.length} m</div>\n                <div>Max atmosphering speed: {starship.max_atmosphering_speed} km/h</div>\n                <div>Max sublight speed: {starship.MGLT} MGLT</div>\n                <div>Hyperdrive rating: {starship.hyperdrive_rating}</div>\n                <div>Crew: {starship.crew}</div>\n                <div>Passengers: {starship.passenger}</div>\n                <div>Cargo capacity: {starship.cargo_capacity} kg</div>\n                <div>Consumables: {starship.consumables}</div>\n                <div>Starship class: {starship.starship_class}</div>\n                <h2>Pilots</h2>\n                <List urls={starship.pilots} items={pilots} pageName=\"character-summary\" route={route} />\n                <h2>Films</h2>\n                <List urls={starship.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n            </div>\n        );\n    }\n}\n\nexport {\n    StarshipPage as default,\n    StarshipPage,\n    StarshipPageSync,\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            let item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return (\n        <ul>\n        {\n            items.map((item) => {\n                let id = route.extractID(item.url);\n                let url = route.find(pageName, { id });\n                let text = item.pending ? '...' : item[field];\n                let linkProps = {\n                    href: url,\n                    className: (item.pending) ? 'pending' : undefined,\n                };\n                return <li><a {...linkProps}>{text}</a></li>;\n            })\n        }\n        </ul>\n    );\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nList.displayName = 'List';\n\nexport {\n    List as default,\n    List\n};\n","import { h, Component } from 'preact';\n\n/** @jsx h */\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nLoading.displayName = 'Loading';\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}